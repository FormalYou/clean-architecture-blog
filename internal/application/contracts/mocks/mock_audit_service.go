// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formal-you/clean-architecture-blog/internal/application/contracts (interfaces: AuditService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_audit_service.go -package=mocks . AuditService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/formal-you/clean-architecture-blog/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditService is a mock of AuditService interface.
type MockAuditService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditServiceMockRecorder
	isgomock struct{}
}

// MockAuditServiceMockRecorder is the mock recorder for MockAuditService.
type MockAuditServiceMockRecorder struct {
	mock *MockAuditService
}

// NewMockAuditService creates a new mock instance.
func NewMockAuditService(ctrl *gomock.Controller) *MockAuditService {
	mock := &MockAuditService{ctrl: ctrl}
	mock.recorder = &MockAuditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditService) EXPECT() *MockAuditServiceMockRecorder {
	return m.recorder
}

// RecordEvent mocks base method.
func (m *MockAuditService) RecordEvent(event domain.AuditEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordEvent", event)
}

// RecordEvent indicates an expected call of RecordEvent.
func (mr *MockAuditServiceMockRecorder) RecordEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordEvent", reflect.TypeOf((*MockAuditService)(nil).RecordEvent), event)
}
