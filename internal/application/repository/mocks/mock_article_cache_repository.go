// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/repository/article_cache_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/repository/article_cache_repository.go -destination=internal/application/repository/mocks/mock_article_cache_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/FormalYou/clean-architecture-blog/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleCacheRepository is a mock of ArticleCacheRepository interface.
type MockArticleCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleCacheRepositoryMockRecorder
	isgomock struct{}
}

// MockArticleCacheRepositoryMockRecorder is the mock recorder for MockArticleCacheRepository.
type MockArticleCacheRepositoryMockRecorder struct {
	mock *MockArticleCacheRepository
}

// NewMockArticleCacheRepository creates a new mock instance.
func NewMockArticleCacheRepository(ctrl *gomock.Controller) *MockArticleCacheRepository {
	mock := &MockArticleCacheRepository{ctrl: ctrl}
	mock.recorder = &MockArticleCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleCacheRepository) EXPECT() *MockArticleCacheRepositoryMockRecorder {
	return m.recorder
}

// DeleteArticle mocks base method.
func (m *MockArticleCacheRepository) DeleteArticle(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockArticleCacheRepositoryMockRecorder) DeleteArticle(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockArticleCacheRepository)(nil).DeleteArticle), ctx, id)
}

// GetArticle mocks base method.
func (m *MockArticleCacheRepository) GetArticle(ctx context.Context, id uint) (*domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, id)
	ret0, _ := ret[0].(*domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockArticleCacheRepositoryMockRecorder) GetArticle(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockArticleCacheRepository)(nil).GetArticle), ctx, id)
}

// GetArticles mocks base method.
func (m *MockArticleCacheRepository) GetArticles(ctx context.Context, key string) ([]*domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx, key)
	ret0, _ := ret[0].([]*domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockArticleCacheRepositoryMockRecorder) GetArticles(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockArticleCacheRepository)(nil).GetArticles), ctx, key)
}

// SetArticle mocks base method.
func (m *MockArticleCacheRepository) SetArticle(ctx context.Context, article *domain.Article, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetArticle", ctx, article, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetArticle indicates an expected call of SetArticle.
func (mr *MockArticleCacheRepositoryMockRecorder) SetArticle(ctx, article, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArticle", reflect.TypeOf((*MockArticleCacheRepository)(nil).SetArticle), ctx, article, expiration)
}

// SetArticles mocks base method.
func (m *MockArticleCacheRepository) SetArticles(ctx context.Context, key string, articles []*domain.Article, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetArticles", ctx, key, articles, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetArticles indicates an expected call of SetArticles.
func (mr *MockArticleCacheRepositoryMockRecorder) SetArticles(ctx, key, articles, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArticles", reflect.TypeOf((*MockArticleCacheRepository)(nil).SetArticles), ctx, key, articles, expiration)
}
