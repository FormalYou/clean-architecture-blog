// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/usecase/article_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/usecase/article_usecase.go -destination=internal/application/usecase/mocks/mock_article_usecase_interface.go -package=mocks ArticleUsecaseInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/formal-you/clean-architecture-blog/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleUsecaseInterface is a mock of ArticleUsecaseInterface interface.
type MockArticleUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockArticleUsecaseInterfaceMockRecorder
	isgomock struct{}
}

// MockArticleUsecaseInterfaceMockRecorder is the mock recorder for MockArticleUsecaseInterface.
type MockArticleUsecaseInterfaceMockRecorder struct {
	mock *MockArticleUsecaseInterface
}

// NewMockArticleUsecaseInterface creates a new mock instance.
func NewMockArticleUsecaseInterface(ctrl *gomock.Controller) *MockArticleUsecaseInterface {
	mock := &MockArticleUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockArticleUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleUsecaseInterface) EXPECT() *MockArticleUsecaseInterfaceMockRecorder {
	return m.recorder
}

// CreateArticle mocks base method.
func (m *MockArticleUsecaseInterface) CreateArticle(ctx context.Context, article *domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockArticleUsecaseInterfaceMockRecorder) CreateArticle(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockArticleUsecaseInterface)(nil).CreateArticle), ctx, article)
}

// DeleteArticle mocks base method.
func (m *MockArticleUsecaseInterface) DeleteArticle(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockArticleUsecaseInterfaceMockRecorder) DeleteArticle(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockArticleUsecaseInterface)(nil).DeleteArticle), ctx, id)
}

// GetAllArticles mocks base method.
func (m *MockArticleUsecaseInterface) GetAllArticles(ctx context.Context) ([]*domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArticles", ctx)
	ret0, _ := ret[0].([]*domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArticles indicates an expected call of GetAllArticles.
func (mr *MockArticleUsecaseInterfaceMockRecorder) GetAllArticles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArticles", reflect.TypeOf((*MockArticleUsecaseInterface)(nil).GetAllArticles), ctx)
}

// GetArticleByID mocks base method.
func (m *MockArticleUsecaseInterface) GetArticleByID(ctx context.Context, id int64) (*domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleByID", ctx, id)
	ret0, _ := ret[0].(*domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleByID indicates an expected call of GetArticleByID.
func (mr *MockArticleUsecaseInterfaceMockRecorder) GetArticleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleByID", reflect.TypeOf((*MockArticleUsecaseInterface)(nil).GetArticleByID), ctx, id)
}

// UpdateArticle mocks base method.
func (m *MockArticleUsecaseInterface) UpdateArticle(ctx context.Context, article *domain.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockArticleUsecaseInterfaceMockRecorder) UpdateArticle(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockArticleUsecaseInterface)(nil).UpdateArticle), ctx, article)
}
