// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/usecase/user_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/usecase/user_usecase.go -destination=internal/application/usecase/mocks/mock_user_usecase_interface.go -package=mocks UserUsecaseInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/formal-you/clean-architecture-blog/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserUsecaseInterface is a mock of UserUsecaseInterface interface.
type MockUserUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseInterfaceMockRecorder
	isgomock struct{}
}

// MockUserUsecaseInterfaceMockRecorder is the mock recorder for MockUserUsecaseInterface.
type MockUserUsecaseInterfaceMockRecorder struct {
	mock *MockUserUsecaseInterface
}

// NewMockUserUsecaseInterface creates a new mock instance.
func NewMockUserUsecaseInterface(ctrl *gomock.Controller) *MockUserUsecaseInterface {
	mock := &MockUserUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecaseInterface) EXPECT() *MockUserUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserUsecaseInterface) Login(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUsecaseInterfaceMockRecorder) Login(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecaseInterface)(nil).Login), username, password)
}

// Register mocks base method.
func (m *MockUserUsecaseInterface) Register(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserUsecaseInterfaceMockRecorder) Register(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUsecaseInterface)(nil).Register), user)
}
